/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

#define BASE 0
#define LOWER 1
#define RAISE 2
#define ADJUST 3

/ {
    // Activate ADJUST layer by pressing raise and lower

    conditional_layers {
        compatible = "zmk,conditional-layers";

        adjust_layer {
            if-layers = <1 1>;
            then-layer = <1>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default {
            display-name = "default";

            // ------------------------------------------------------------------------------------------------------------
            // |   `   |  1  |  2  |  3   |  4   |  5   |                   |  6   |  7    |  8    |  9   |   0   |       |
            // |  ESC  |  Q  |  W  |  E   |  R   |  T   |                   |  Y   |  U    |  I    |  O   |   P   | BKSPC |
            // |  TAB  |  A  |  S  |  D   |  F   |  G   |                   |  H   |  J    |  K    |  L   |   ;   |   '   |
            // | SHIFT |  Z  |  X  |  C   |  V   |  B   |  MUTE  |  |       |  N   |  M    |  ,    |  .   |   /   | SHIFT |
            //               | GUI | ALT  | CTRL | LOWER|  ENTER |  | SPACE | RAISE| CTRL  | ALT   | GUI  |

            bindings = <
&kp ESCAPE        &kp N1  &kp N2    &kp N3         &kp N4        &kp N5                                 &kp N6  &kp N7     &kp N8     &kp N9     &kp N0    &kp BACKSPACE
&kp TAB           &kp Q   &kp W     &kp E          &kp R         &kp T                                  &kp Y   &kp U      &kp I      &kp O      &kp P     &kp LBKT
&kp LEFT_SHIFT    &kp A   &kp S     &kp D          &kp F         &kp G                                  &kp H   &kp J      &kp K      &kp L      &kp SEMI  &kp SQT
&kp LEFT_CONTROL  &kp Z   &kp X     &kp C          &kp V         &kp B   &kp C_MUTE    &kp PRINTSCREEN  &kp N   &kp M      &kp COMMA  &kp DOT    &kp FSLH  &kp RBKT
                          &kp LWIN  &kp LA(SPACE)  &kp LEFT_ALT  &mo 1   &kp SPACE     &kp ENTER        &mo 2   &kp MINUS  &kp EQUAL  &kp GRAVE
            >;

            sensor-bindings =
                <&inc_dec_kp C_VOLUME_DOWN C_VOL_UP>,
                <&inc_dec_kp PG_UP PG_DN>;
        };

        right {
            bindings = <
&none  &none  &none  &none  &none  &none                  &kp F6           &kp F7        &kp F8         &kp F9          &kp F10     &kp F11
&none  &none  &none  &none  &none  &none                  &kp INSERT       &kp HOME      &kp UP_ARROW   &kp END         &kp DELETE  &kp F12
&none  &none  &none  &none  &none  &none                  &kp PAUSE_BREAK  &kp LEFT      &kp DOWN       &kp RIGHT       &none       &kp PG_UP
&none  &none  &none  &none  &none  &none  &none    &none  &kp SCROLLLOCK   &kp CAPSLOCK  &kp C_AC_COPY  &kp C_AC_PASTE  &none       &kp PAGE_DOWN
              &none  &none  &none  &none  &none    &none  &none            &kp C_PREV    &kp C_PP       &kp C_NEXT
            >;

            label = "right";
        };

        left {
            bindings = <
&none  &kp F1             &kp F2             &kp F3         &kp F4  &kp F5                         &none  &none  &none  &none  &none  &none
&none  &none              &none              &none          &none   &kp LG(LS(T))                  &none  &none  &none  &none  &none  &none
&none  &kp LG(LC(LA(V)))  &kp LG(LC(LS(M)))  &none          &none   &none                          &none  &none  &none  &none  &none  &none
&none  &none              &none              &kp LG(LS(C))  &none   &none          &none    &none  &none  &none  &none  &none  &none  &none
                          &none              &none          &none   &none          &none    &none  &none  &none  &none  &none
            >;

            label = "left";
        };
    };
};
